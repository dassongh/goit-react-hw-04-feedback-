{"version":3,"sources":["components/Section.jsx","components/Statistics.jsx","components/FeedbackOptions.jsx","components/Notifications.jsx","App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","totalFeedbacks","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","btn","type","onClick","Notification","App","useState","setGood","setNeutral","setBad","total","toFixed","countPositivePercentage","e","target","innerText","s","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAEe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,oCACE,6BAAKD,IACJC,KCJQ,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,eACAC,EACC,EADDA,mBAEA,OACE,gCACE,4CACA,+BACE,yCAAYJ,KACZ,4CAAeC,KACf,wCAAWC,KACX,0CAAaC,KACb,sDACuBC,EAAqB,EAAIA,EAAqB,EADrE,aCEOC,MAjBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAQC,KAAK,SAAmBC,QAASJ,EAAzC,SACGE,GADwBA,SCJpB,SAASG,EAAT,GAAkC,IAAVf,EAAS,EAATA,MACrC,OACE,8BACE,6BAAKA,MCgDIgB,MA/Cf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOd,EAAP,KAAae,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOb,EAAP,KAAgBe,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOZ,EAAP,KAAYe,EAAZ,KAsBMC,EAJ4BlB,EAAOC,EAAUC,EAK7CE,EAJ0B,SAAAc,GAAK,OAAMlB,EAAOkB,EAAS,KAAKC,UAIrCC,CAAwBF,GAEnD,OACE,eAACtB,EAAD,CAASC,MAAM,6BAAf,UACE,cAAC,EAAD,CAAiBS,QANR,CAAC,OAAQ,UAAW,OAMGC,gBAzBjB,SAAAc,GACjB,OAAQA,EAAEC,OAAOC,WACf,IAAK,OACHR,GAAQ,SAAAS,GAAC,OAAIA,EAAI,KACjB,MACF,IAAK,UACHR,GAAW,SAAAQ,GAAC,OAAIA,EAAI,KACpB,MACF,IAAK,MACHP,GAAO,SAAAO,GAAC,OAAIA,EAAI,KAChB,MACF,QACE,WAeDN,EACC,cAACnB,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,eAAgBe,EAChBd,mBAAoBA,IAGtB,cAACQ,EAAD,CAAcf,MAAM,6BC1C5B4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.bd09bdb9.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n","import PropTypes from \"prop-types\";\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  totalFeedbacks,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <div>\r\n      <h2>Statistics</h2>\r\n      <ul>\r\n        <li>Good : {good}</li>\r\n        <li>Neutral : {neutral}</li>\r\n        <li>Bad : {bad}</li>\r\n        <li>Total : {totalFeedbacks}</li>\r\n        <li>\r\n          Positive feedback : {positivePercentage > 0 ? positivePercentage : 0}%\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  bad: PropTypes.number,\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  positivePercentage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  totalFeedbacks: PropTypes.number,\r\n};\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div>\r\n      {options.map((btn) => (\r\n        <button type=\"button\" key={btn} onClick={onLeaveFeedback}>\r\n          {btn}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func,\r\n  options: PropTypes.array,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ title }) {\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nNotification.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n","import { useState } from 'react';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Notifications';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const btnHandler = e => {\n    switch (e.target.innerText) {\n      case 'good':\n        setGood(s => s + 1);\n        break;\n      case 'neutral':\n        setNeutral(s => s + 1);\n        break;\n      case 'bad':\n        setBad(s => s + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedbacks = () => good + neutral + bad;\n  const countPositivePercentage = total => ((good / total) * 100).toFixed();\n\n  const btns = ['good', 'neutral', 'bad'];\n  const total = countTotalFeedbacks();\n  const positivePercentage = countPositivePercentage(total);\n\n  return (\n    <Section title=\"Please leave your feedback\">\n      <FeedbackOptions options={btns} onLeaveFeedback={btnHandler} />\n\n      {total ? (\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          totalFeedbacks={total}\n          positivePercentage={positivePercentage}\n        />\n      ) : (\n        <Notification title=\"There is no feedback\" />\n      )}\n    </Section>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}